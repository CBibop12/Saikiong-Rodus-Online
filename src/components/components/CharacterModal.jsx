/* eslint-disable react/prop-types */
import React, { useState } from "react";
import { abilities as abilitiesList } from "../../abilities.js";

const CharacterModal = ({ character, onClose }) => {
  const [showDetails, setShowDetails] = useState(false);

  if (!character) return null;

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
  // const getEffectType = (effect) => {
  //   const positiveEffects = [
  //     "–õ–µ—á–µ–Ω–∏–µ",
  //     "–©–∏—Ç",
  //     "–£—Å–∫–æ—Ä–µ–Ω–∏–µ",
  //     "–£—Å–∏–ª–µ–Ω–∏–µ —É—Ä–æ–Ω–∞",
  //     "–ò–º–º—É–Ω–∏—Ç–µ—Ç",
  //     "–¢–æ—á–Ω–æ—Å—Ç—å",
  //     "–í–∞–º–ø–∏—Ä–∏–∑–º",
  //   ];
  //   const negativeEffects = [
  //     "–Ø–¥–æ–≤–∏—Ç—ã–π —É—Ä–æ–Ω",
  //     "–°–ª–∞–±–æ—Å—Ç—å",
  //     "–£—è–∑–≤–∏–º–æ—Å—Ç—å",
  //     "–û–ø—É—Ç—ã–≤–∞–Ω–∏–µ",
  //     "–û–≥–ª—É—à–µ–Ω–∏–µ",
  //     "–û–±–µ–∑–æ—Ä—É–∂–∏–≤–∞–Ω–∏–µ",
  //   ];
  //   const neutralEffects = [
  //     "–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å",
  //     "–ü–æ–ª–µ—Ç",
  //     "–°—Ç—Ä–∞—Ö",
  //     "–ü—Ä–∏—Ç—è–≥–∏–≤–∞–Ω–∏–µ",
  //     "–ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è",
  //   ];
  //   if (positiveEffects.some((e) => effectName.includes(e))) return "positive";
  //   if (negativeEffects.some((e) => effectName.includes(e))) return "negative";
  //   if (neutralEffects.some((e) => effectName.includes(e))) return "neutral";
  //   return "neutral"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º
  // };

  const getProperValue = (key) => {
    let value;
    if (key == "–£—Ä–æ–Ω") {
      value = character.currentDamage;
    } else if (key == "–ú–∞–Ω–∞") {
      value = character.currentMana;
    } else if (key == "–õ–æ–≤–∫–æ—Å—Ç—å") {
      value = character.currentAgility;
    } else if (key == "–ë—Ä–æ–Ω—è") {
      value = character.currentArmor;
    } else if (key == "–î–∞–ª—å–Ω–æ—Å—Ç—å") {
      value = character.currentRange;
    }
    return value;
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  const getEffectStyle = (effect) => {
    const type = effect.effectType;
    const baseStyle = {
      padding: "8px 12px",
      margin: "4px",
      borderRadius: "6px",
      fontSize: "14px",
      fontWeight: "500",
      alignItems: "center",
      gap: "8px",
      transition: "all 0.2s ease",
    };
    switch (type) {
      case "positive":
        return {
          ...baseStyle,
          backgroundColor: "rgba(34, 197, 94, 0.1)",
          color: "#22c55e",
          border: "1px solid rgba(34, 197, 94, 0.2)",
        };
      case "negative":
        return {
          ...baseStyle,
          backgroundColor: "rgba(239, 68, 68, 0.1)",
          color: "#ef4444",
          border: "1px solid rgba(239, 68, 68, 0.2)",
        };
      case "neutral":
      default:
        return {
          ...baseStyle,
          backgroundColor: "rgba(75, 85, 99, 0.1)",
          color: "#4b5563",
          border: "1px solid rgba(75, 85, 99, 0.2)",
        };
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  const getEffectIcon = (effectType) => {
    switch (effectType) {
      case "positive":
        return "‚ú®";
      case "negative":
        return "üíÄ";
      case "neutral":
      default:
        return "üîÑ";
    }
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–≤–µ—Ä–ª–µ—è (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞)
  const modalOverlayStyle = {
    position: "fixed",
    top: 0,
    left: 0,
    width: "100vw",
    height: "100vh",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    zIndex: 9999,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
  const modalContainerStyle = {
    backgroundColor: "#1f2937", // —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ–≥–æ –æ–∫–Ω–∞
    borderRadius: "12px",
    overflow: "hidden",
    display: "flex",
    maxWidth: showDetails ? "860px" : "500px",
    width: "100%",
    maxHeight: "90vh",
    transition: "max-width 0.3s ease",
    boxShadow: "0 10px 30px rgba(0,0,0,0.3)",
    margin: "0 auto", // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
  };

  const mainContentStyle = {
    width: "460px",
    flexShrink: 0,
    padding: "16px 20px",
    overflow: "scroll",
  };

  // –°—Ç–∏–ª—å –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const characterImageContainerStyle = {
    width: "120px",
    height: "120px",
    borderRadius: "8px",
    overflow: "hidden",
    marginBottom: "16px",
    backgroundColor: "rgba(75, 85, 99, 0.1)", // –§–æ–Ω –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    border: "1px solid rgba(75, 85, 99, 0.2)",
  };

  // –°—Ç–∏–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const characterImageStyle = {
    width: "100%",
    height: "100%",
    objectFit: "cover",
    objectPosition: "center top",
  };

  // –°—Ç–∏–ª—å –¥–ª—è –≥–∏–±–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const headerFlexStyle = {
    display: "flex",
    alignItems: "flex-start",
    gap: "16px",
    marginBottom: "20px",
  };

  // –°—Ç–∏–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
  const headerInfoStyle = {
    flex: 1,
  };

  // –ü—Ä–∞–≤—ã–π –±–ª–æ–∫ "–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π" (—Ç–µ–ø–µ—Ä—å —Å —Ç–µ–º –∂–µ —Ñ–æ–Ω–æ–º, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫)
  const detailsContentStyle = {
    width: "400px",
    padding: "20px",
    borderLeft: "1px solid rgba(75, 85, 99, 0.2)",
    animation: showDetails
      ? "characterModalInfoSlideRight 0.3s ease-out forwards"
      : "none",
    overflowY: "auto",
    maxHeight: "90vh", // —á—Ç–æ–±—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
  };

  // –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ/‚Üê/‚Üí" (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞)
  const detailsButtonStyle = {
    position: "absolute",
    right: 0,
    top: "60%",
    transform: "translateY(-50%)",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "8px 8px",
    width: "32px",
    height: "64px",
    backgroundColor: "rgba(75, 85, 99, 0.2)",
    color: "#e5e7eb",
    border: "1px solid rgba(75, 85, 99, 0.3)",
    borderRadius: showDetails ? "0 8px 8px 0" : "8px",
    fontSize: "14px",
    fontWeight: "500",
    cursor: "pointer",
    transition: "all 0.3s ease",
    zIndex: 10,
    textOrientation: "mixed",
  };

  // –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å –∫—Ä–∞–µ–º –æ–∫–Ω–∞)
  const closeButtonStyle = {
    position: "absolute",
    top: "10px",
    right: "10px", // –í—Å–µ–≥–¥–∞ –≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É –æ–∫–Ω–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    zIndex: 20,
    background: "transparent",
    border: "none",
    fontSize: "20px",
    color: "#eee",
    cursor: "pointer",
  };

  // --- –°—Ç–∏–ª–∏ –¥–ª—è —Å–µ–∫—Ü–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ ---
  const sectionTitleStyle = {
    fontSize: "16px",
    fontWeight: "600",
    color: "#e5e7eb",
    marginBottom: "12px",
    marginTop: "16px",
    display: "flex",
    alignItems: "center",
    gap: "8px",
  };

  const infoRowStyle = {
    display: "flex",
    justifyContent: "space-between",
    padding: "8px 0",
    borderBottom: "1px solid rgba(75, 85, 99, 0.1)",
  };

  const propertyNameStyle = {
    color: "#9ca3af",
    fontSize: "14px",
  };

  const propertyValueStyle = {
    color: "#e5e7eb",
    fontSize: "14px",
    fontWeight: "500",
  };

  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const getBooleanValueStyle = (value) => ({
    ...propertyValueStyle,
    color: value ? "#22c55e" : "#ef4444",
  });

  // --- —Å—Ç–∏–ª–∏ –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (abilities) ---
  const abilityContainerStyle = {
    backgroundColor: "rgba(31, 41, 55, 0.2)",
    borderRadius: "8px",
    padding: "12px",
    margin: "8px 0",
    border: "1px solid rgba(75, 85, 99, 0.1)",
  };

  const abilityHeaderStyle = {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: "8px",
  };

  const abilityKeyStyle = {
    color: "#60a5fa",
    fontSize: "14px",
    fontWeight: "500",
  };

  const abilityCooldownStyle = {
    color: "#9ca3af",
    fontSize: "12px",
    backgroundColor: "rgba(75, 85, 99, 0.1)",
    padding: "4px 8px",
    borderRadius: "12px",
  };

  const abilityDescriptionStyle = {
    color: "#d1d5db",
    fontSize: "14px",
    lineHeight: "1.4",
  };

  // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const getCharacterImageUrl = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ image —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (character.image) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ image
      return `https://pdjerosynzbsjmwqdxbr.supabase.co/storage/v1/object/public/images/characters/${character.image}`;
    }
    // –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    return null;
  };

  // –†–µ–Ω–¥–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏)
  const renderAdditionalInfo = () => {
    return (
      <div
        style={detailsContentStyle}
        className="character-modal__additional-info"
      >
        {/* Functions */}
        {character.functions && (
          <div className="character-modal__functions-section">
            <h4 style={sectionTitleStyle}>
              <span style={{ fontSize: "18px" }}>‚öôÔ∏è</span> –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            </h4>
            <div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è</span>
                <span
                  style={getBooleanValueStyle(
                    character.functions.movementAbility
                  )}
                >
                  {character.functions.movementAbility ? "–î–∞" : "–ù–µ—Ç"}
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å</span>
                <span
                  style={getBooleanValueStyle(
                    character.functions.actionAbility
                  )}
                >
                  {character.functions.actionAbility ? "–î–∞" : "–ù–µ—Ç"}
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
                </span>
                <span
                  style={getBooleanValueStyle(
                    character.functions.abilityUsability
                  )}
                >
                  {character.functions.abilityUsability ? "–î–∞" : "–ù–µ—Ç"}
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</span>
                <span
                  style={getBooleanValueStyle(
                    character.functions.itemUsability
                  )}
                >
                  {character.functions.itemUsability ? "–î–∞" : "–ù–µ—Ç"}
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Advanced Settings */}
        {character.advancedSettings && (
          <div
            className="character-modal__advanced-settings-section"
            style={{ marginTop: "24px" }}
          >
            <h4 style={sectionTitleStyle}>
              <span style={{ fontSize: "18px" }}>üîÆ</span> –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </h4>
            <div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>
                  –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ —É—Ä–æ–Ω–∞
                </span>
                <span style={propertyValueStyle}>
                  {character.advancedSettings.appliedDamageMultiplier}√ó
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>
                  –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–Ω–æ—Å–∏–º–æ–≥–æ —É—Ä–æ–Ω–∞
                </span>
                <span style={propertyValueStyle}>
                  {character.advancedSettings.damageMultiplier}√ó
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>–í–∞–º–ø–∏—Ä–∏–∑–º</span>
                <span style={propertyValueStyle}>
                  {character.advancedSettings.vampirism}%
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>–ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —É–≤–æ—Ä–æ—Ç–∞</span>
                <span style={propertyValueStyle}>
                  {character.advancedSettings.basicDodge}%
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —à–∞–Ω—Å —É–≤–æ—Ä–æ—Ç–∞</span>
                <span style={propertyValueStyle}>
                  {character.advancedSettings.advancedDodge}%
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>–°–ª–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</span>
                <span style={propertyValueStyle}>
                  {character.advancedSettings.characterLayer}
                </span>
              </div>
              <div style={infoRowStyle}>
                <span style={propertyNameStyle}>–¢–∏–ø —É—Ä–æ–Ω–∞</span>
                <span
                  style={{
                    ...propertyValueStyle,
                    color:
                      character.advancedSettings.damageType === "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π"
                        ? "#f97316"
                        : character.advancedSettings.damageType === "–º–∞–≥–∏—á–µ—Å–∫–∏–π"
                          ? "#8b5cf6"
                          : "#e5e7eb",
                  }}
                >
                  {character.advancedSettings.damageType}
                </span>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <div style={modalOverlayStyle} className="modal-overlay">
      <div className="character-modal" style={modalContainerStyle}>
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å–ª–µ–≤–∞) */}
        <div style={mainContentStyle}>
          <div className="modal-header" style={{ marginBottom: "16px" }}>
            <div style={headerFlexStyle}>
              {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
              {character.image && (
                <div style={characterImageContainerStyle}>
                  <img
                    src={getCharacterImageUrl()}
                    alt={character.name}
                    style={characterImageStyle}
                  />
                </div>
              )}

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ */}
              <div style={headerInfoStyle}>
                <h3
                  className="character-name"
                  style={{ fontSize: "20px", color: "#fff", margin: 0 }}
                >
                  {character.name}
                </h3>
                <div
                  className="character-type"
                  style={{
                    color: "#bbb",
                    fontSize: "14px",
                    marginTop: "4px",
                    display: "inline-block",
                  }}
                >
                  {character.type}
                </div>
              </div>
            </div>
          </div>

          <div className="modal-body">
            {/* HP Bar */}
            <div className="character-hp" style={{ marginBottom: "16px" }}>
              <div
                className="hp-label"
                style={{ marginBottom: "4px", color: "#9ca3af" }}
              >
                HP
              </div>
              <div
                className="hp-bar"
                style={{
                  backgroundColor: "#4b5563",
                  height: "8px",
                  borderRadius: "4px",
                }}
              >
                <div
                  className="hp-fill"
                  style={{
                    height: "100%",
                    borderRadius: "4px",
                    width: `${(character.currentHP / (character.stats.HP || 1)) * 100
                      }%`,
                    backgroundColor:
                      character.currentHP < (character.stats.HP || 1) * 0.3
                        ? "#ef4444"
                        : "#22c55e",
                    transition: "width 0.3s",
                  }}
                />
              </div>
              <div
                className="hp-value"
                style={{ marginTop: "4px", fontSize: "14px", color: "#e5e7eb" }}
              >
                {character.currentHP} / {character.stats.HP}
              </div>
            </div>

            {/* Main Stats */}
            <div
              className="stats-grid"
              style={{ display: "flex", flexWrap: "wrap", gap: "8px" }}
            >
              {character.stats &&
                Object.entries(character.stats).map(([key, value]) =>
                  key !== "HP" ? (
                    <div
                      key={key}
                      className="stat-card"
                      style={{
                        borderRadius: "6px",
                        padding: "8px 12px",
                        width: "calc(50% - 8px)",
                        display: "flex",
                        alignItems: "center",
                        gap: "8px",
                      }}
                    >
                      <div className="stat-icon" style={{ fontSize: "16px" }}>
                        {key === "–£—Ä–æ–Ω" && "‚öîÔ∏è"}
                        {key === "–ú–∞–Ω–∞" && "‚ú®"}
                        {key === "–ë—Ä–æ–Ω—è" && "üõ°Ô∏è"}
                        {key === "–õ–æ–≤–∫–æ—Å—Ç—å" && "üí®"}
                        {key === "–î–∞–ª—å–Ω–æ—Å—Ç—å" && "üéØ"}
                      </div>
                      <div className="stat-info">
                        <div
                          className="stat-name"
                          style={{ color: "#9ca3af", fontSize: "12px" }}
                        >
                          {key}
                        </div>
                        <div
                          className="stat-value"
                          style={{ color: "#fff", fontSize: "14px" }}
                        >
                          {getProperValue(key)}/{key === "–ë—Ä–æ–Ω—è" ? 5 : value}
                        </div>
                      </div>
                    </div>
                  ) : null
                )}
            </div>

            {/* Inventory */}
            {character.inventory && character.inventory.length > 0 && (
              <div className="inventory-section" style={{ marginTop: "16px" }}>
                <h4 style={{ color: "#fff", marginBottom: "8px" }}>
                  –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
                </h4>
                <div
                  className="inventory-grid"
                  style={{ display: "flex", gap: "6px", flexWrap: "wrap" }}
                >
                  {character.inventory.map((item, index) => (
                    <div
                      key={index}
                      className="inventory-item"
                      style={{
                        backgroundColor: "rgba(31, 41, 55, 0.2)",
                        padding: "6px 10px",
                        borderRadius: "6px",
                        color: "#e5e7eb",
                        fontSize: "14px",
                      }}
                    >
                      {item.name}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Effects */}
            {character.effects?.length > 0 && (
              <div className="effects-section" style={{ marginTop: 16 }}>
                <h4 style={{ color: "#fff", marginBottom: 8 }}>–≠—Ñ—Ñ–µ–∫—Ç—ã</h4>

                <div className="effects-list" style={{ display: "flex", flexDirection: "column" }}>
                  {character.effects.map((effect, index) => (
                    <div
                      key={index}
                      className="effect-item"
                      style={getEffectStyle(effect)}   /* —Ñ–æ–Ω/–±–æ—Ä–¥–µ—Ä –ø–æ —Ç–∏–ø—É */
                    >
                      {/* —Å—Ç—Ä–æ–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ö–æ–¥–∞–º–∏ */}
                      <div className="effect-header">
                        <span className="effect-icon">{getEffectIcon(effect.effectType)}</span>
                        <span className="effect-name">{effect.name}</span>
                        {effect.turnsRemain !== undefined && (
                          <span className="effect-turns">({effect.turnsRemain})</span>
                        )}
                      </div>

                      {/* –û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è/—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ —Ö–æ–≤–µ—Ä—É */}
                      {effect.description && (
                        <div className="effect-description">
                          {effect.description}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
            {/* Abilities */}
            {character.abilities && character.abilities.length > 0 && (
              <div
                className="character-modal__abilities-section"
                style={{ marginTop: "16px" }}
              >
                <h4
                  style={{
                    color: "#fff",
                    fontSize: "16px",
                    marginBottom: "12px",
                  }}
                >
                  –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                </h4>
                {character.abilities.map((ability, index) => (
                  <div key={index} style={abilityContainerStyle}>
                    <div style={abilityHeaderStyle}>
                      <div style={abilityKeyStyle}>
                        {abilitiesList[ability.key].name}
                      </div>
                      <div style={abilityCooldownStyle}>
                        –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: {ability.coolDown}{" "}
                        {ability.coolDown > 1
                          ? ability.coolDown < 5
                            ? "—Ö–æ–¥–∞"
                            : "—Ö–æ–¥–æ–≤"
                          : "—Ö–æ–¥"}
                      </div>
                    </div>
                    <div style={abilityDescriptionStyle}>
                      {ability.description}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º) */}
        <button
          style={detailsButtonStyle}
          onClick={() => setShowDetails(!showDetails)}
          className="character-modal__details-toggle"
        >
          {showDetails ? "‚Üê" : "‚Üí"}{" "}
          {/* –°—Ç—Ä–µ–ª–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤–ø—Ä–∞–≤–æ/–≤–ª–µ–≤–æ) */}
        </button>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ) */}
        {showDetails && renderAdditionalInfo()}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
        <button
          style={closeButtonStyle}
          onClick={(e) => {
            e.stopPropagation();
            onClose();
          }}
        >
          ‚úï
        </button>

        {/* CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –±–ª–æ–∫–∞ —Å–ø—Ä–∞–≤–∞ */}
        <style jsx>{`
          @keyframes characterModalInfoSlideRight {
            from {
              opacity: 0;
              transform: translateX(-20px);
            }
            to {
              opacity: 1;
              transform: translateX(0);
            }
          }
        `}</style>
      </div>
    </div>
  );
};

export default CharacterModal;
